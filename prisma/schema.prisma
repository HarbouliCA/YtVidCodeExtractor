// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    Video[]
}

model Video {
  id           String        @id @default(cuid())
  youtubeId    String
  title        String
  description  String?       @db.Text
  thumbnailUrl String?
  duration     Int?         // Duration in seconds
  status       VideoStatus   @default(PENDING)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  codeSnippets CodeSnippet[]
  transcript   Transcript?
  frames       Frame[]

  @@index([userId])
}

model CodeSnippet {
  id          String   @id @default(cuid())
  content     String   @db.Text
  language    String   // Programming language
  startTime   Float    // Timestamp in video where snippet starts
  endTime     Float    // Timestamp in video where snippet ends
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
}

model Transcript {
  id        String             @id @default(cuid())
  content   String             @db.Text  // Full transcript text
  segments  TranscriptSegment[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  videoId   String             @unique
  video     Video              @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model TranscriptSegment {
  id          String     @id @default(cuid())
  startTime   Float      // Start time in seconds
  endTime     Float      // End time in seconds
  text        String     @db.Text
  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([transcriptId])
}

model Frame {
  id        String   @id @default(cuid())
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  url       String
  timestamp Float
  hasCode   Boolean
  text      String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([videoId])
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
