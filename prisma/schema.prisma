// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  videos    Video[]
}

model Video {
  id            String    @id @default(cuid())
  youtubeId     String
  title         String
  description   String?   @db.Text
  thumbnailUrl  String?
  status        String    @default("PENDING")
  transcript    String?   @db.Text // JSON string: { segments: { start: number, end: number, text: string, type: string }[], metadata: { totalDuration: number, segmentCount: number, lastUpdated: string } }
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  frames        Frame[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
}

model Frame {
  id        String   @id @default(cuid())
  url       String   // URL to the stored frame image
  timestamp Float    // Timestamp in seconds
  hasCode   Boolean  @default(false)
  text      String?  @db.Text // OCR extracted text
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([videoId])
}

enum VideoStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
